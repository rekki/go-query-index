// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dsl.proto

package go_query_dsl

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Query_Type int32

const (
	Query_TERM   Query_Type = 0
	Query_AND    Query_Type = 1
	Query_OR     Query_Type = 2
	Query_DISMAX Query_Type = 3
)

var Query_Type_name = map[int32]string{
	0: "TERM",
	1: "AND",
	2: "OR",
	3: "DISMAX",
}

var Query_Type_value = map[string]int32{
	"TERM":   0,
	"AND":    1,
	"OR":     2,
	"DISMAX": 3,
}

func (x Query_Type) String() string {
	return proto.EnumName(Query_Type_name, int32(x))
}

func (Query_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3e64ff22355f731d, []int{0, 0}
}

type Query struct {
	Queries    []*Query   `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	Type       Query_Type `protobuf:"varint,2,opt,name=type,proto3,enum=go.query.dsl.Query_Type" json:"type,omitempty"`
	Field      string     `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
	Value      string     `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Not        *Query     `protobuf:"bytes,5,opt,name=not,proto3" json:"not,omitempty"`
	Tiebreaker float32    `protobuf:"fixed32,6,opt,name=tiebreaker,proto3" json:"tiebreaker,omitempty"`
	Boost      float32    `protobuf:"fixed32,7,opt,name=boost,proto3" json:"boost,omitempty"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e64ff22355f731d, []int{0}
}
func (m *Query) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Query.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return m.Size()
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetQueries() []*Query {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *Query) GetType() Query_Type {
	if m != nil {
		return m.Type
	}
	return Query_TERM
}

func (m *Query) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *Query) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Query) GetNot() *Query {
	if m != nil {
		return m.Not
	}
	return nil
}

func (m *Query) GetTiebreaker() float32 {
	if m != nil {
		return m.Tiebreaker
	}
	return 0
}

func (m *Query) GetBoost() float32 {
	if m != nil {
		return m.Boost
	}
	return 0
}

func init() {
	proto.RegisterEnum("go.query.dsl.Query_Type", Query_Type_name, Query_Type_value)
	proto.RegisterType((*Query)(nil), "go.query.dsl.Query")
}

func init() { proto.RegisterFile("dsl.proto", fileDescriptor_3e64ff22355f731d) }

var fileDescriptor_3e64ff22355f731d = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x3f, 0x4b, 0xc4, 0x30,
	0x18, 0x87, 0x9b, 0xfe, 0xf5, 0x5e, 0x45, 0xca, 0xab, 0x43, 0xa6, 0x10, 0x0e, 0x84, 0x0e, 0x5e,
	0x86, 0xf3, 0x13, 0x9c, 0x9c, 0x83, 0xc3, 0x29, 0xc6, 0x1b, 0x5c, 0xaf, 0x34, 0x4a, 0xb1, 0x98,
	0xda, 0xe6, 0x84, 0x7e, 0x0b, 0x3f, 0x80, 0x1f, 0xc8, 0xf1, 0x46, 0x47, 0x69, 0xbf, 0x88, 0x24,
	0x45, 0xb8, 0x41, 0xc7, 0xe7, 0x79, 0x1f, 0xc2, 0x8f, 0xc0, 0xa4, 0x68, 0x2b, 0x51, 0x37, 0xda,
	0x68, 0x3c, 0x7a, 0xd2, 0xe2, 0x75, 0xab, 0x9a, 0x4e, 0x14, 0x6d, 0x35, 0xfd, 0xf0, 0x21, 0xba,
	0xb3, 0x84, 0x33, 0x48, 0xac, 0x2e, 0x55, 0x4b, 0x09, 0x0f, 0xb2, 0xc3, 0xf9, 0x89, 0xd8, 0x2f,
	0x85, 0xab, 0xe4, 0x6f, 0x83, 0xe7, 0x10, 0x9a, 0xae, 0x56, 0xd4, 0xe7, 0x24, 0x3b, 0x9e, 0xd3,
	0x3f, 0x5a, 0xb1, 0xee, 0x6a, 0x25, 0x5d, 0x85, 0xa7, 0x10, 0x3d, 0x96, 0xaa, 0x2a, 0x68, 0xc0,
	0x49, 0x36, 0x91, 0x23, 0x58, 0xfb, 0xb6, 0xa9, 0xb6, 0x8a, 0x86, 0xa3, 0x75, 0x80, 0x67, 0x10,
	0xbc, 0x68, 0x43, 0x23, 0x4e, 0xfe, 0x1b, 0x61, 0xef, 0xc8, 0x00, 0x4c, 0xa9, 0xf2, 0x46, 0x6d,
	0x9e, 0x55, 0x43, 0x63, 0x4e, 0x32, 0x5f, 0xee, 0x19, 0xfb, 0x78, 0xae, 0x75, 0x6b, 0x68, 0xe2,
	0x4e, 0x23, 0x4c, 0x67, 0x10, 0xda, 0x59, 0x78, 0x00, 0xe1, 0xfa, 0x4a, 0xae, 0x52, 0x0f, 0x13,
	0x08, 0x16, 0x37, 0xcb, 0x94, 0x60, 0x0c, 0xfe, 0xad, 0x4c, 0x7d, 0x04, 0x88, 0x97, 0xd7, 0xf7,
	0xab, 0xc5, 0x43, 0x1a, 0x5c, 0xd2, 0xcf, 0x9e, 0x91, 0x5d, 0xcf, 0xc8, 0x77, 0xcf, 0xc8, 0xfb,
	0xc0, 0xbc, 0xdd, 0xc0, 0xbc, 0xaf, 0x81, 0x79, 0x79, 0xec, 0x7e, 0xf3, 0xe2, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x65, 0xfe, 0xc5, 0xec, 0x5a, 0x01, 0x00, 0x00,
}

func (m *Query) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Query) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Boost != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Boost))))
		i--
		dAtA[i] = 0x3d
	}
	if m.Tiebreaker != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Tiebreaker))))
		i--
		dAtA[i] = 0x35
	}
	if m.Not != nil {
		{
			size, err := m.Not.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDsl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDsl(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintDsl(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintDsl(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Queries) > 0 {
		for iNdEx := len(m.Queries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Queries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDsl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDsl(dAtA []byte, offset int, v uint64) int {
	offset -= sovDsl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovDsl(uint64(l))
		}
	}
	if m.Type != 0 {
		n += 1 + sovDsl(uint64(m.Type))
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovDsl(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDsl(uint64(l))
	}
	if m.Not != nil {
		l = m.Not.Size()
		n += 1 + l + sovDsl(uint64(l))
	}
	if m.Tiebreaker != 0 {
		n += 5
	}
	if m.Boost != 0 {
		n += 5
	}
	return n
}

func sovDsl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDsl(x uint64) (n int) {
	return sovDsl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Query) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDsl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Query: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Query: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDsl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, &Query{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Query_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDsl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDsl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDsl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDsl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Not", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDsl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDsl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDsl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Not == nil {
				m.Not = &Query{}
			}
			if err := m.Not.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiebreaker", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Tiebreaker = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boost", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Boost = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipDsl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDsl
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDsl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDsl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDsl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDsl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDsl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDsl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDsl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDsl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDsl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDsl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDsl = fmt.Errorf("proto: unexpected end of group")
)
